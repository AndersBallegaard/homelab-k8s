{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Homelab This is a very much work in progress repository for migrating all (or atleast most) of my homelab to k8s This repo is intentionally public to act as inspiration to others, and force me to think more about security Project structure For setup and cluster management see admin/readme.md For services running on the cluster see the cluster dir This page is autogenerated, do not edit it directly see this for more information","title":"Home"},{"location":"#homelab","text":"This is a very much work in progress repository for migrating all (or atleast most) of my homelab to k8s This repo is intentionally public to act as inspiration to others, and force me to think more about security","title":"Homelab"},{"location":"#project-structure","text":"For setup and cluster management see admin/readme.md For services running on the cluster see the cluster dir This page is autogenerated, do not edit it directly see this for more information","title":"Project structure"},{"location":"apps/apps/","text":"APPS This section describes the apps running on the cluster This page is autogenerated, do not edit it directly see this for more information","title":"Apps"},{"location":"apps/apps/#apps","text":"This section describes the apps running on the cluster This page is autogenerated, do not edit it directly see this for more information","title":"APPS"},{"location":"info/info/","text":"About this documentation Documentation in this repository is automaticly put toghther from templates, this is done to have a single source to update if a section is needed multiple places like a doc page, and a readme page for a part of subdirectory How to add to this documentation Create new section First create a directory for the section, and a jinja template file # Make directory and empty jinja file mkdir -p docs/example touch docs/example/example.jinja # All files should include footer containing warning not to edit md files directly echo '{% include \"docs/footer.section\" %}' >> docs/example/example.jinja This page should be added to the nav section of mkdocs.yaml, see the file or mkdocs documentation for how to do this Add page to existing section Create a new file inside the directory you want to add to. The file should follow the 'relevant_name.section' naming scheme. Treat this file as a markdown file, and add the content you want Once you are ready to include it in the documentation add a line to the directorys .jinja file, the line should look something like below {% include \"example/world_domination.section\" %} Note, this should always be placed above the footer inclusion While there aren't many restrictions on the content in a section, it is expected that each section starts with an H1 header Documentation deployment Deployment to github pages is not automatic, in order to deploy, follow this process # The following commands are all from the root of the project # Build documentation ./build_docs.sh # Source venv source .venv/bin/activate # Run locally to validate changes before deploying mkdocs serve # Use mkdocs github pages feature to deploy mkdocs gh-deploy This page is autogenerated, do not edit it directly see this for more information","title":"Information"},{"location":"info/info/#about-this-documentation","text":"Documentation in this repository is automaticly put toghther from templates, this is done to have a single source to update if a section is needed multiple places like a doc page, and a readme page for a part of subdirectory","title":"About this documentation"},{"location":"info/info/#how-to-add-to-this-documentation","text":"","title":"How to add to this documentation"},{"location":"info/info/#create-new-section","text":"First create a directory for the section, and a jinja template file # Make directory and empty jinja file mkdir -p docs/example touch docs/example/example.jinja # All files should include footer containing warning not to edit md files directly echo '{% include \"docs/footer.section\" %}' >> docs/example/example.jinja This page should be added to the nav section of mkdocs.yaml, see the file or mkdocs documentation for how to do this","title":"Create new section"},{"location":"info/info/#add-page-to-existing-section","text":"Create a new file inside the directory you want to add to. The file should follow the 'relevant_name.section' naming scheme. Treat this file as a markdown file, and add the content you want Once you are ready to include it in the documentation add a line to the directorys .jinja file, the line should look something like below {% include \"example/world_domination.section\" %} Note, this should always be placed above the footer inclusion While there aren't many restrictions on the content in a section, it is expected that each section starts with an H1 header","title":"Add page to existing section"},{"location":"info/info/#documentation-deployment","text":"Deployment to github pages is not automatic, in order to deploy, follow this process # The following commands are all from the root of the project # Build documentation ./build_docs.sh # Source venv source .venv/bin/activate # Run locally to validate changes before deploying mkdocs serve # Use mkdocs github pages feature to deploy mkdocs gh-deploy This page is autogenerated, do not edit it directly see this for more information","title":"Documentation deployment"},{"location":"infra/infra/","text":"Infra This section describes the infrastructure side of the cluster This page is autogenerated, do not edit it directly see this for more information","title":"Infrastructure"},{"location":"infra/infra/#infra","text":"This section describes the infrastructure side of the cluster This page is autogenerated, do not edit it directly see this for more information","title":"Infra"},{"location":"troubleshooting/troubleshooting/","text":"Troubleshooting Tips and ticks for the cluster Port forwarding For troubleshooting purposes it is often practical to port forward a service in k8s. This is also the only way to access certine admin interfaces that aren't exposed with an ingress Generic service This is the general way to expose any service with a port-forward. In a step to reduce the use of legacy IP, binding to ipv6 is forced in this example, note you might want to bind to ::1 instead of :: kubectl -n NAMESPACE port-forward svc/SERVICE_NAME PORT:PORT --address=\"::\" Capacitor If troubleshooting fluxcd, it might be nice to have a more visual representation of what services are in fluxcd. For this purpose a capacitor deployment exists, but isn't exposed via any ingress for security reasons, to forward it run the following command kubectl -n flux-system port-forward svc/capacitor 9000:9000 --address=\"::1\" CEPH dashboard When troubleshooting ceph/rook, it might be nice to use the ceph dashboard, it can be exposed using the following command kubectl -n rook-ceph port-forward svc/rook-ceph-mgr-dashboard 7000:7000 --address=\"::\" In order to login use the username \"admin\", and the password provided by the following command. kubectl get secret -n rook-ceph -o jsonpath='{.data.password}' rook-ceph-dashboard-password | base64 -d This page is autogenerated, do not edit it directly see this for more information","title":"Troubleshooting"},{"location":"troubleshooting/troubleshooting/#troubleshooting","text":"Tips and ticks for the cluster","title":"Troubleshooting"},{"location":"troubleshooting/troubleshooting/#port-forwarding","text":"For troubleshooting purposes it is often practical to port forward a service in k8s. This is also the only way to access certine admin interfaces that aren't exposed with an ingress","title":"Port forwarding"},{"location":"troubleshooting/troubleshooting/#generic-service","text":"This is the general way to expose any service with a port-forward. In a step to reduce the use of legacy IP, binding to ipv6 is forced in this example, note you might want to bind to ::1 instead of :: kubectl -n NAMESPACE port-forward svc/SERVICE_NAME PORT:PORT --address=\"::\"","title":"Generic service"},{"location":"troubleshooting/troubleshooting/#capacitor","text":"If troubleshooting fluxcd, it might be nice to have a more visual representation of what services are in fluxcd. For this purpose a capacitor deployment exists, but isn't exposed via any ingress for security reasons, to forward it run the following command kubectl -n flux-system port-forward svc/capacitor 9000:9000 --address=\"::1\"","title":"Capacitor"},{"location":"troubleshooting/troubleshooting/#ceph-dashboard","text":"When troubleshooting ceph/rook, it might be nice to use the ceph dashboard, it can be exposed using the following command kubectl -n rook-ceph port-forward svc/rook-ceph-mgr-dashboard 7000:7000 --address=\"::\" In order to login use the username \"admin\", and the password provided by the following command. kubectl get secret -n rook-ceph -o jsonpath='{.data.password}' rook-ceph-dashboard-password | base64 -d This page is autogenerated, do not edit it directly see this for more information","title":"CEPH dashboard"}]}